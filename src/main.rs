mod words;

use clap::Parser;
use rand::Rng;
use words::WORDS;

/// Generate diceware-like passphrases
#[derive(Parser)]
#[clap(version = "1.0.0")]
struct Arguments {
    /// The number of words a passphrase shall be made up of
    #[clap(
        short = 'w',
        long = "words",
        value_name = "n",
        required = false,
        default_value = "4"
    )]
    num_words: usize,

    /// The number of passphrases to generate
    #[clap(
        short = 'n',
        long = "passphrases",
        value_name = "n",
        required = false,
        default_value = "1"
    )]
    num_passwords: usize,

    #[clap(short = 'd', long = "delimiter", default_value = " ")]
    delimiter: String,

    /// Print nothing but the passphrase (implied when -n is used)
    #[clap(short = 'q', long = "quiet")]
    quiet: bool,
}

/// Get a random word from the word list. The index is generated by throwing 5 dice.
///
/// Of course, a word could just be picked by generating a single random number in the range [0,
/// list length), but then it wouldn't be diceware.
fn get_word<'a>() -> &'a str {
    let mut rng = rand::thread_rng();
    let index = rng.gen_range(0..WORDS.len());
    WORDS[index]
}

/// Generate a passphrase made up of `n` words
fn gen_passphrase(n: usize, delimiter: &str) -> String {
    (0..n)
        .map(|_| get_word())
        .collect::<Vec<&str>>()
        .join(delimiter)
}

fn main() {
    let args = Arguments::parse();

    if args.num_passwords > 1 {
        for _ in 0..args.num_passwords {
            println!("{}", gen_passphrase(args.num_words, &args.delimiter));
        }

        return;
    }

    let password = gen_passphrase(args.num_words, &args.delimiter);

    if args.quiet {
        println!("{}", password);
        return;
    }

    let possible_combinations = (WORDS.len() as f64).powf(args.num_words as f64);
    let power_of_ten = possible_combinations.log10().floor() as u64;

    println!("Your password is:");
    println!();
    println!("\t{}", password);
    println!();
    println!(
        "This password is one of about 10^{} possible combinations.",
        power_of_ten
    );
}
